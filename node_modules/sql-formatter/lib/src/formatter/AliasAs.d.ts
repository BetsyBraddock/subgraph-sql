import type { FormatOptions } from "../types";
import { type Token } from "../lexer/token";
/** Adds and removes AS tokens as configured by aliasAs option */
export default class AliasAs {
    private index;
    private tokens;
    private previousReservedToken;
    private previousCommandToken;
    private asTokenFactory;
    private aliasAs;
    constructor(cfg: FormatOptions, tokens: Token[]);
    /** Returns tokens with AS tokens added/removed as needed */
    process(): Token[];
    /** True when AS keyword should be added *before* current token */
    private shouldAddBefore;
    private isMissingTableAlias;
    private isMissingSelectColumnAlias;
    /** True when AS keyword should be added *after* current token */
    private shouldAddAfter;
    private isMissingTypeCastAs;
    private isEdgeCaseCTE;
    private isEdgeCaseCreateTable;
    private shouldRemove;
    private isRemovableNonSelectAs;
    getPreviousReservedToken(): Token;
    isWithinSelect(): boolean;
    private lookBehind;
    private lookAhead;
}
