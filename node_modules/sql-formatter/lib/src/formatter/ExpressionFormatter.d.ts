import type { FormatOptions } from "../types";
import Params from "./Params";
import { AstNode } from "../parser/ast";
import Layout from './Layout';
interface ExpressionFormatterParams {
    cfg: FormatOptions;
    params: Params;
    layout: Layout;
    inline?: boolean;
}
/** Formats a generic SQL expression */
export default class ExpressionFormatter {
    private cfg;
    private inlineBlock;
    private params;
    private layout;
    private inline;
    private nodes;
    private index;
    constructor({ cfg, params, layout, inline }: ExpressionFormatterParams);
    format(nodes: AstNode[]): Layout;
    private formatFunctionCall;
    private formatArraySubscript;
    private formatParenthesis;
    private formatBetweenPredicate;
    private formatClause;
    private formatBinaryClause;
    private formatLimitClause;
    private formatAllColumnsAsterisk;
    private formatSubExpression;
    private formatToken;
    /**
     * Formats ident/string/number/variable tokens
     */
    private formatWord;
    /** Formats a line comment onto query */
    private formatLineComment;
    /** Formats a block comment onto query */
    private formatBlockComment;
    private splitBlockComment;
    private formatJoin;
    /**
     * Formats a Reserved Keyword onto query
     */
    private formatKeyword;
    /**
     * Formats a Reserved Dependent Clause token onto query, supporting the keyword that precedes it
     */
    private formatDependentClause;
    private formatJoinCondition;
    /**
     * Formats an Operator onto query, following rules for specific characters
     */
    private formatOperator;
    /**
     * Formats a Logical Operator onto query, joining boolean conditions
     */
    private formatLogicalOperator;
    private formatCaseStart;
    private formatCaseEnd;
    private formatMultilineBlockEnd;
    /**
     * Formats a parameter placeholder item onto query, to be replaced with the value of the placeholder
     */
    private formatParameter;
    /**
     * Formats a comma Operator onto query, ending line unless in an Inline Block
     */
    private formatComma;
    private show;
    private showToken;
}
export {};
