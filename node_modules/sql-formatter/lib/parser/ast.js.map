{"version":3,"file":"ast.js","names":["NodeType","isTokenNode","node","type"],"sources":["../../src/parser/ast.ts"],"sourcesContent":["import { Token } from 'src/lexer/token';\n\nexport enum NodeType {\n  statement = 'statement',\n  clause = 'clause',\n  binary_clause = 'binary_clause',\n  function_call = 'function_call',\n  array_subscript = 'array_subscript',\n  parenthesis = 'parenthesis',\n  between_predicate = 'between_predicate',\n  limit_clause = 'limit_clause',\n  all_columns_asterisk = 'all_columns_asterisk',\n  token = 'token',\n}\n\nexport type Statement = {\n  type: NodeType.statement;\n  children: AstNode[];\n  hasSemicolon: boolean;\n};\n\nexport type Clause = {\n  type: NodeType.clause;\n  nameToken: Token;\n  children: AstNode[];\n};\n\nexport type BinaryClause = {\n  type: NodeType.binary_clause;\n  nameToken: Token;\n  children: AstNode[];\n};\n\n// Wrapper for plain nodes inside AST\nexport type TokenNode = {\n  type: NodeType.token;\n  token: Token;\n};\n\nexport type FunctionCall = {\n  type: NodeType.function_call;\n  nameToken: Token;\n  parenthesis: Parenthesis;\n};\n\n// <ident>[<expr>]\nexport type ArraySubscript = {\n  type: NodeType.array_subscript;\n  arrayToken: Token;\n  parenthesis: Parenthesis;\n};\n\nexport type Parenthesis = {\n  type: NodeType.parenthesis;\n  children: AstNode[];\n  openParen: string;\n  closeParen: string;\n};\n\n// BETWEEN <expr1> AND <expr2>\nexport type BetweenPredicate = {\n  type: NodeType.between_predicate;\n  betweenToken: Token;\n  expr1: Token;\n  andToken: Token;\n  expr2: Token;\n};\n\n// LIMIT <count>\n// LIMIT <offset>, <count>\nexport type LimitClause = {\n  type: NodeType.limit_clause;\n  limitToken: Token;\n  count: AstNode[];\n  offset?: AstNode[];\n};\n\n// The \"*\" operator used in SELECT *\nexport type AllColumnsAsterisk = {\n  type: NodeType.all_columns_asterisk;\n};\n\nexport type AstNode =\n  | Clause\n  | BinaryClause\n  | FunctionCall\n  | ArraySubscript\n  | Parenthesis\n  | BetweenPredicate\n  | LimitClause\n  | AllColumnsAsterisk\n  | TokenNode;\n\nexport const isTokenNode = (node: AstNode): node is TokenNode => node.type === 'token';\n"],"mappings":";;;;;;IAEYA,Q;;;WAAAA,Q;EAAAA,Q;EAAAA,Q;EAAAA,Q;EAAAA,Q;EAAAA,Q;EAAAA,Q;EAAAA,Q;EAAAA,Q;EAAAA,Q;EAAAA,Q;GAAAA,Q,wBAAAA,Q;;AA2FL,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD;EAAA,OAAsCA,IAAI,CAACC,IAAL,KAAc,OAApD;AAAA,CAApB"}