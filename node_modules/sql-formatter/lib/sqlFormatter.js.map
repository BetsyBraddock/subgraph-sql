{"version":3,"file":"sqlFormatter.js","names":["formatters","bigquery","BigQueryFormatter","db2","Db2Formatter","hive","HiveFormatter","mariadb","MariaDbFormatter","mysql","MySqlFormatter","n1ql","N1qlFormatter","plsql","PlSqlFormatter","postgresql","PostgreSqlFormatter","redshift","RedshiftFormatter","spark","SparkFormatter","sql","SqlFormatter","sqlite","SqliteFormatter","tsql","TSqlFormatter","supportedDialects","Object","keys","defaultOptions","language","tabWidth","useTabs","keywordCase","indentStyle","logicalOperatorNewline","aliasAs","tabulateAlias","commaPosition","expressionWidth","linesBetweenQueries","denseOperators","newlineBeforeSemicolon","format","query","cfg","Error","options","validateConfig","Formatter","ConfigError","includes","params","undefined","validateParams","console","warn","paramValues","Array","values","every","p"],"sources":["../src/sqlFormatter.ts"],"sourcesContent":["import BigQueryFormatter from 'src/languages/bigquery.formatter';\nimport Db2Formatter from 'src/languages/db2.formatter';\nimport HiveFormatter from 'src/languages/hive.formatter';\nimport MariaDbFormatter from 'src/languages/mariadb.formatter';\nimport MySqlFormatter from 'src/languages/mysql.formatter';\nimport N1qlFormatter from 'src/languages/n1ql.formatter';\nimport PlSqlFormatter from 'src/languages/plsql.formatter';\nimport PostgreSqlFormatter from 'src/languages/postgresql.formatter';\nimport RedshiftFormatter from 'src/languages/redshift.formatter';\nimport SparkFormatter from 'src/languages/spark.formatter';\nimport SqliteFormatter from 'src/languages/sqlite.formatter';\nimport SqlFormatter from 'src/languages/sql.formatter';\nimport TSqlFormatter from 'src/languages/tsql.formatter';\n\nimport type { FormatOptions } from './types';\nimport { ParamItems } from './formatter/Params';\n\nexport const formatters = {\n  bigquery: BigQueryFormatter,\n  db2: Db2Formatter,\n  hive: HiveFormatter,\n  mariadb: MariaDbFormatter,\n  mysql: MySqlFormatter,\n  n1ql: N1qlFormatter,\n  plsql: PlSqlFormatter,\n  postgresql: PostgreSqlFormatter,\n  redshift: RedshiftFormatter,\n  spark: SparkFormatter,\n  sql: SqlFormatter,\n  sqlite: SqliteFormatter,\n  tsql: TSqlFormatter,\n};\nexport type SqlLanguage = keyof typeof formatters;\nexport const supportedDialects = Object.keys(formatters);\n\nexport type FormatFnOptions = FormatOptions & { language: SqlLanguage };\n\nconst defaultOptions: FormatFnOptions = {\n  language: 'sql',\n  tabWidth: 2,\n  useTabs: false,\n  keywordCase: 'preserve',\n  indentStyle: 'standard',\n  logicalOperatorNewline: 'before',\n  aliasAs: 'preserve',\n  tabulateAlias: false,\n  commaPosition: 'after',\n  expressionWidth: 50,\n  linesBetweenQueries: 1,\n  denseOperators: false,\n  newlineBeforeSemicolon: false,\n};\n\n/**\n * Format whitespace in a query to make it easier to read.\n *\n * @param {string} query - input SQL query string\n * @param {FormatOptions} cfg Configuration options (see docs in README)\n * @return {string} formatted query\n */\nexport const format = (query: string, cfg: Partial<FormatFnOptions> = {}): string => {\n  if (typeof query !== 'string') {\n    throw new Error('Invalid query argument. Expected string, instead got ' + typeof query);\n  }\n\n  const options = validateConfig({\n    ...defaultOptions,\n    ...cfg,\n  });\n\n  const Formatter = formatters[options.language];\n  return new Formatter(options).format(query);\n};\n\nexport class ConfigError extends Error {}\n\nfunction validateConfig(cfg: FormatFnOptions): FormatFnOptions {\n  if (!supportedDialects.includes(cfg.language)) {\n    throw new ConfigError(`Unsupported SQL dialect: ${cfg.language}`);\n  }\n\n  if ('multilineLists' in cfg) {\n    throw new ConfigError('multilineLists config is no more supported.');\n  }\n  if ('newlineBeforeOpenParen' in cfg) {\n    throw new ConfigError('newlineBeforeOpenParen config is no more supported.');\n  }\n  if ('newlineBeforeCloseParen' in cfg) {\n    throw new ConfigError('newlineBeforeCloseParen config is no more supported.');\n  }\n\n  if (cfg.expressionWidth <= 0) {\n    throw new ConfigError(\n      `expressionWidth config must be positive number. Received ${cfg.expressionWidth} instead.`\n    );\n  }\n\n  if (cfg.commaPosition === 'before' && cfg.useTabs) {\n    throw new ConfigError(\n      'commaPosition: before does not work when tabs are used for indentation.'\n    );\n  }\n\n  if (cfg.language === 'hive' && cfg.params !== undefined) {\n    throw new ConfigError(\n      'Unexpected \"params\" option. Prepared statement placeholders not supported for Hive.'\n    );\n  }\n\n  if (cfg.language === 'spark' && cfg.params !== undefined) {\n    throw new ConfigError(\n      'Unexpected \"params\" option. Prepared statement placeholders not supported for Spark.'\n    );\n  }\n\n  if (cfg.params && !validateParams(cfg.params)) {\n    // eslint-disable-next-line no-console\n    console.warn('WARNING: All \"params\" option values should be strings.');\n  }\n\n  return cfg;\n}\n\nfunction validateParams(params: ParamItems | string[]): boolean {\n  const paramValues = params instanceof Array ? params : Object.values(params);\n  return paramValues.every(p => typeof p === 'string');\n}\n\nexport type FormatFn = typeof format;\n"],"mappings":"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"}