{"version":3,"file":"Layout.js","names":["WS","Layout","indentation","items","item","SPACE","push","NO_SPACE","trimHorizontalWhitespace","NEWLINE","addNewline","INDENT","addIndentation","SINGLE_INDENT","isHorizontalWhitespace","last","pop","length","i","getLevel","map","itemToString","join","getSingleIndent"],"sources":["../../src/formatter/Layout.ts"],"sourcesContent":["import { last } from 'src/utils';\n\nimport Indentation from './Indentation';\n\n/** Whitespace modifiers to be used with add() method */\nexport enum WS {\n  SPACE, // Adds single space\n  NO_SPACE, // Removes preceding horizontal whitespace (if any)\n  NEWLINE, // Adds single newline (and removes any preceding whitespace)\n  INDENT, // Adds indentation (as much as needed for current indentation level)\n  SINGLE_INDENT, // Adds whitespace for single indentation step\n}\n\nexport type LayoutItem = WS.SPACE | WS.SINGLE_INDENT | WS.NEWLINE | string;\n\n/**\n * API for constructing SQL string (especially the whitespace part).\n *\n * It hides the internal implementation.\n * Originally it used plain string concatenation, which was expensive.\n * Now it's storing items to array and builds the string only in the end.\n */\nexport default class Layout {\n  private items: LayoutItem[] = [];\n\n  constructor(public indentation: Indentation) {}\n\n  /**\n   * Appends token strings and whitespace modifications to SQL string.\n   */\n  public add(...items: (WS | string)[]) {\n    for (const item of items) {\n      switch (item) {\n        case WS.SPACE:\n          this.items.push(WS.SPACE);\n          break;\n        case WS.NO_SPACE:\n          this.trimHorizontalWhitespace();\n          break;\n        case WS.NEWLINE:\n          this.trimHorizontalWhitespace();\n          this.addNewline();\n          break;\n        case WS.INDENT:\n          this.addIndentation();\n          break;\n        case WS.SINGLE_INDENT:\n          this.items.push(WS.SINGLE_INDENT);\n          break;\n        default:\n          this.items.push(item);\n      }\n    }\n  }\n\n  private trimHorizontalWhitespace() {\n    while (isHorizontalWhitespace(last(this.items))) {\n      this.items.pop();\n    }\n  }\n\n  private addNewline() {\n    if (this.items.length > 0 && last(this.items) !== WS.NEWLINE) {\n      this.items.push(WS.NEWLINE);\n    }\n  }\n\n  private addIndentation() {\n    for (let i = 0; i < this.indentation.getLevel(); i++) {\n      this.items.push(WS.SINGLE_INDENT);\n    }\n  }\n\n  /**\n   * Returns the final SQL string.\n   */\n  public toString(): string {\n    return this.items.map(item => this.itemToString(item)).join('');\n  }\n\n  private itemToString(item: LayoutItem): string {\n    switch (item) {\n      case WS.SPACE:\n        return ' ';\n      case WS.NEWLINE:\n        return '\\n';\n      case WS.SINGLE_INDENT:\n        return this.indentation.getSingleIndent();\n      default:\n        return item;\n    }\n  }\n}\n\nconst isHorizontalWhitespace = (item: WS | string | undefined) =>\n  item === WS.SPACE || item === WS.SINGLE_INDENT;\n"],"mappings":";;;;;;;AAAA;;;;;;;;;;AAIA;IACYA,E;;;WAAAA,E;EAAAA,E,CAAAA,E;EAAAA,E,CAAAA,E;EAAAA,E,CAAAA,E;EAAAA,E,CAAAA,E;EAAAA,E,CAAAA,E;GAAAA,E,kBAAAA,E;;AAUZ;AACA;AACA;AACA;AACA;AACA;AACA;IACqBC,M;EAGnB,gBAAmBC,WAAnB,EAA6C;IAAA;;IAAA,KAA1BA,WAA0B,GAA1BA,WAA0B;;IAAA,+BAFf,EAEe;EAAE;EAE/C;AACF;AACA;;;;;WACE,eAAsC;MAAA,kCAAxBC,KAAwB;QAAxBA,KAAwB;MAAA;;MACpC,0BAAmBA,KAAnB,4BAA0B;QAArB,IAAMC,IAAI,aAAV;;QACH,QAAQA,IAAR;UACE,KAAKJ,EAAE,CAACK,KAAR;YACE,KAAKF,KAAL,CAAWG,IAAX,CAAgBN,EAAE,CAACK,KAAnB;YACA;;UACF,KAAKL,EAAE,CAACO,QAAR;YACE,KAAKC,wBAAL;YACA;;UACF,KAAKR,EAAE,CAACS,OAAR;YACE,KAAKD,wBAAL;YACA,KAAKE,UAAL;YACA;;UACF,KAAKV,EAAE,CAACW,MAAR;YACE,KAAKC,cAAL;YACA;;UACF,KAAKZ,EAAE,CAACa,aAAR;YACE,KAAKV,KAAL,CAAWG,IAAX,CAAgBN,EAAE,CAACa,aAAnB;YACA;;UACF;YACE,KAAKV,KAAL,CAAWG,IAAX,CAAgBF,IAAhB;QAlBJ;MAoBD;IACF;;;WAED,oCAAmC;MACjC,OAAOU,sBAAsB,CAAC,IAAAC,WAAA,EAAK,KAAKZ,KAAV,CAAD,CAA7B,EAAiD;QAC/C,KAAKA,KAAL,CAAWa,GAAX;MACD;IACF;;;WAED,sBAAqB;MACnB,IAAI,KAAKb,KAAL,CAAWc,MAAX,GAAoB,CAApB,IAAyB,IAAAF,WAAA,EAAK,KAAKZ,KAAV,MAAqBH,EAAE,CAACS,OAArD,EAA8D;QAC5D,KAAKN,KAAL,CAAWG,IAAX,CAAgBN,EAAE,CAACS,OAAnB;MACD;IACF;;;WAED,0BAAyB;MACvB,KAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKhB,WAAL,CAAiBiB,QAAjB,EAApB,EAAiDD,CAAC,EAAlD,EAAsD;QACpD,KAAKf,KAAL,CAAWG,IAAX,CAAgBN,EAAE,CAACa,aAAnB;MACD;IACF;IAED;AACF;AACA;;;;WACE,oBAA0B;MAAA;;MACxB,OAAO,KAAKV,KAAL,CAAWiB,GAAX,CAAe,UAAAhB,IAAI;QAAA,OAAI,KAAI,CAACiB,YAAL,CAAkBjB,IAAlB,CAAJ;MAAA,CAAnB,EAAgDkB,IAAhD,CAAqD,EAArD,CAAP;IACD;;;WAED,sBAAqBlB,IAArB,EAA+C;MAC7C,QAAQA,IAAR;QACE,KAAKJ,EAAE,CAACK,KAAR;UACE,OAAO,GAAP;;QACF,KAAKL,EAAE,CAACS,OAAR;UACE,OAAO,IAAP;;QACF,KAAKT,EAAE,CAACa,aAAR;UACE,OAAO,KAAKX,WAAL,CAAiBqB,eAAjB,EAAP;;QACF;UACE,OAAOnB,IAAP;MARJ;IAUD;;;;;;;;AAGH,IAAMU,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACV,IAAD;EAAA,OAC7BA,IAAI,KAAKJ,EAAE,CAACK,KAAZ,IAAqBD,IAAI,KAAKJ,EAAE,CAACa,aADJ;AAAA,CAA/B"}