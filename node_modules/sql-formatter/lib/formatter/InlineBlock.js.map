{"version":3,"file":"InlineBlock.js","names":["InlineBlock","expressionWidth","parenthesis","inlineWidth","length","children","node","type","NodeType","function_call","nameToken","value","array_subscript","arrayToken","between_predicate","betweenWidth","clause","limit_clause","binary_clause","Infinity","all_columns_asterisk","token","isForbiddenToken","sum","betweenToken","expr1","andToken","expr2","map","TokenType","RESERVED_LOGICAL_OPERATOR","LINE_COMMENT","BLOCK_COMMENT","isToken","CASE"],"sources":["../../src/formatter/InlineBlock.ts"],"sourcesContent":["import { sum } from 'src/utils';\nimport { isToken, type Token, TokenType } from 'src/lexer/token';\nimport { BetweenPredicate, NodeType, Parenthesis } from 'src/parser/ast';\n\n/**\n * Bookkeeper for inline blocks.\n *\n * Inline blocks are parenthesised expressions that are shorter than INLINE_MAX_LENGTH.\n * These blocks are formatted on a single line, unlike longer parenthesised\n * expressions where open-parenthesis causes newline and increase of indentation.\n */\nexport default class InlineBlock {\n  constructor(private expressionWidth: number) {}\n\n  /**\n   * Check if this should be an inline parentheses block\n   * Examples are \"NOW()\", \"COUNT(*)\", \"int(10)\", key(`somecolumn`), DECIMAL(7,2)\n   */\n  public isInlineBlock(parenthesis: Parenthesis): boolean {\n    return this.inlineWidth(parenthesis) <= this.expressionWidth;\n  }\n\n  private inlineWidth(parenthesis: Parenthesis): number {\n    let length = 2; // two parenthesis\n\n    for (const node of parenthesis.children) {\n      switch (node.type) {\n        case NodeType.function_call:\n          length += node.nameToken.value.length + this.inlineWidth(node.parenthesis);\n          break;\n        case NodeType.array_subscript:\n          length += node.arrayToken.value.length + this.inlineWidth(node.parenthesis);\n          break;\n        case NodeType.parenthesis:\n          length += this.inlineWidth(node);\n          break;\n        case NodeType.between_predicate:\n          length += this.betweenWidth(node);\n          break;\n        case NodeType.clause:\n        case NodeType.limit_clause:\n        case NodeType.binary_clause:\n          return Infinity;\n        case NodeType.all_columns_asterisk:\n          length += 1;\n          break;\n        case NodeType.token:\n          length += node.token.value.length;\n          if (this.isForbiddenToken(node.token)) {\n            return Infinity;\n          }\n          break;\n      }\n\n      // Overran max length\n      if (length > this.expressionWidth) {\n        return length;\n      }\n    }\n    return length;\n  }\n\n  private betweenWidth(node: BetweenPredicate): number {\n    return sum(\n      [node.betweenToken, node.expr1, node.andToken, node.expr2].map(token => token.value.length)\n    );\n  }\n\n  // Reserved words that cause newlines, comments and semicolons\n  // are not allowed inside inline parentheses block\n  private isForbiddenToken(token: Token) {\n    return (\n      token.type === TokenType.RESERVED_LOGICAL_OPERATOR ||\n      token.type === TokenType.LINE_COMMENT ||\n      token.type === TokenType.BLOCK_COMMENT ||\n      isToken.CASE(token) // CASE cannot have inline blocks\n    );\n  }\n}\n"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;IACqBA,W;EACnB,qBAAoBC,eAApB,EAA6C;IAAA;;IAAA,KAAzBA,eAAyB,GAAzBA,eAAyB;EAAE;EAE/C;AACF;AACA;AACA;;;;;WACE,uBAAqBC,WAArB,EAAwD;MACtD,OAAO,KAAKC,WAAL,CAAiBD,WAAjB,KAAiC,KAAKD,eAA7C;IACD;;;WAED,qBAAoBC,WAApB,EAAsD;MACpD,IAAIE,MAAM,GAAG,CAAb,CADoD,CACpC;;MADoC,2CAGjCF,WAAW,CAACG,QAHqB;MAAA;;MAAA;QAGpD,oDAAyC;UAAA,IAA9BC,IAA8B;;UACvC,QAAQA,IAAI,CAACC,IAAb;YACE,KAAKC,aAAA,CAASC,aAAd;cACEL,MAAM,IAAIE,IAAI,CAACI,SAAL,CAAeC,KAAf,CAAqBP,MAArB,GAA8B,KAAKD,WAAL,CAAiBG,IAAI,CAACJ,WAAtB,CAAxC;cACA;;YACF,KAAKM,aAAA,CAASI,eAAd;cACER,MAAM,IAAIE,IAAI,CAACO,UAAL,CAAgBF,KAAhB,CAAsBP,MAAtB,GAA+B,KAAKD,WAAL,CAAiBG,IAAI,CAACJ,WAAtB,CAAzC;cACA;;YACF,KAAKM,aAAA,CAASN,WAAd;cACEE,MAAM,IAAI,KAAKD,WAAL,CAAiBG,IAAjB,CAAV;cACA;;YACF,KAAKE,aAAA,CAASM,iBAAd;cACEV,MAAM,IAAI,KAAKW,YAAL,CAAkBT,IAAlB,CAAV;cACA;;YACF,KAAKE,aAAA,CAASQ,MAAd;YACA,KAAKR,aAAA,CAASS,YAAd;YACA,KAAKT,aAAA,CAASU,aAAd;cACE,OAAOC,QAAP;;YACF,KAAKX,aAAA,CAASY,oBAAd;cACEhB,MAAM,IAAI,CAAV;cACA;;YACF,KAAKI,aAAA,CAASa,KAAd;cACEjB,MAAM,IAAIE,IAAI,CAACe,KAAL,CAAWV,KAAX,CAAiBP,MAA3B;;cACA,IAAI,KAAKkB,gBAAL,CAAsBhB,IAAI,CAACe,KAA3B,CAAJ,EAAuC;gBACrC,OAAOF,QAAP;cACD;;cACD;UAzBJ,CADuC,CA6BvC;;;UACA,IAAIf,MAAM,GAAG,KAAKH,eAAlB,EAAmC;YACjC,OAAOG,MAAP;UACD;QACF;MApCmD;QAAA;MAAA;QAAA;MAAA;;MAqCpD,OAAOA,MAAP;IACD;;;WAED,sBAAqBE,IAArB,EAAqD;MACnD,OAAO,IAAAiB,UAAA,EACL,CAACjB,IAAI,CAACkB,YAAN,EAAoBlB,IAAI,CAACmB,KAAzB,EAAgCnB,IAAI,CAACoB,QAArC,EAA+CpB,IAAI,CAACqB,KAApD,EAA2DC,GAA3D,CAA+D,UAAAP,KAAK;QAAA,OAAIA,KAAK,CAACV,KAAN,CAAYP,MAAhB;MAAA,CAApE,CADK,CAAP;IAGD,C,CAED;IACA;;;;WACA,0BAAyBiB,KAAzB,EAAuC;MACrC,OACEA,KAAK,CAACd,IAAN,KAAesB,gBAAA,CAAUC,yBAAzB,IACAT,KAAK,CAACd,IAAN,KAAesB,gBAAA,CAAUE,YADzB,IAEAV,KAAK,CAACd,IAAN,KAAesB,gBAAA,CAAUG,aAFzB,IAGAC,cAAA,CAAQC,IAAR,CAAab,KAAb,CAJF,CAIsB;MAJtB;IAMD"}