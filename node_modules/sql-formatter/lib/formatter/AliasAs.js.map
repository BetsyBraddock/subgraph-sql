{"version":3,"file":"AliasAs.js","names":["AliasAs","cfg","tokens","EOF_TOKEN","aliasAs","asTokenFactory","AsTokenFactory","keywordCase","processedTokens","index","length","token","isReserved","previousReservedToken","type","TokenType","RESERVED_COMMAND","previousCommandToken","isToken","AS","shouldRemove","push","IDENTIFIER","NUMBER","STRING","VARIABLE","shouldAddBefore","shouldAddAfter","isMissingTableAlias","isMissingSelectColumnAlias","lookBehind","value","prevToken","nextToken","lookAhead","isWithinSelect","END","COMMA","isCommand","isEdgeCaseCTE","isEdgeCaseCreateTable","isMissingTypeCastAs","CAST","getPreviousReservedToken","RESERVED_KEYWORD","WITH","TABLE","endsWith","isRemovableNonSelectAs","SELECT","n"],"sources":["../../src/formatter/AliasAs.ts"],"sourcesContent":["import type { AliasMode, FormatOptions } from 'src/types';\nimport { isCommand, isToken, type Token, TokenType, EOF_TOKEN, isReserved } from 'src/lexer/token';\nimport AsTokenFactory from './AsTokenFactory';\n\n/** Adds and removes AS tokens as configured by aliasAs option */\nexport default class AliasAs {\n  private index = 0;\n  private tokens: Token[] = [];\n  private previousReservedToken: Token = EOF_TOKEN;\n  private previousCommandToken: Token = EOF_TOKEN;\n  private asTokenFactory: AsTokenFactory;\n  private aliasAs: AliasMode;\n\n  constructor(cfg: FormatOptions, tokens: Token[]) {\n    this.aliasAs = cfg.aliasAs;\n    this.asTokenFactory = new AsTokenFactory(cfg.keywordCase, tokens);\n    this.tokens = tokens;\n  }\n\n  /** Returns tokens with AS tokens added/removed as needed */\n  public process(): Token[] {\n    const processedTokens: Token[] = [];\n\n    for (this.index = 0; this.index < this.tokens.length; this.index++) {\n      const token = this.tokens[this.index];\n\n      if (isReserved(token)) {\n        this.previousReservedToken = token;\n        if (token.type === TokenType.RESERVED_COMMAND) {\n          this.previousCommandToken = token;\n        }\n      }\n\n      if (isToken.AS(token)) {\n        if (!this.shouldRemove()) {\n          processedTokens.push(token);\n        }\n      } else if (\n        token.type === TokenType.IDENTIFIER ||\n        token.type === TokenType.NUMBER ||\n        token.type === TokenType.STRING ||\n        token.type === TokenType.VARIABLE\n      ) {\n        if (this.shouldAddBefore(token)) {\n          processedTokens.push(this.asTokenFactory.token());\n        }\n\n        processedTokens.push(token);\n\n        if (this.shouldAddAfter()) {\n          processedTokens.push(this.asTokenFactory.token());\n        }\n      } else {\n        processedTokens.push(token);\n      }\n    }\n\n    return processedTokens;\n  }\n\n  /** True when AS keyword should be added *before* current token */\n  private shouldAddBefore(token: Token): boolean {\n    return this.isMissingTableAlias(token) || this.isMissingSelectColumnAlias(token);\n  }\n\n  // if table alias is missing and should be added\n  private isMissingTableAlias(token: Token): boolean {\n    return (\n      this.aliasAs === 'always' &&\n      token.type === TokenType.IDENTIFIER &&\n      this.lookBehind().value === ')'\n    );\n  }\n\n  // if select column alias is missing and should be added\n  private isMissingSelectColumnAlias(token: Token): boolean {\n    const prevToken = this.lookBehind();\n    const nextToken = this.lookAhead();\n    return (\n      (this.aliasAs === 'always' || this.aliasAs === 'select') &&\n      this.isWithinSelect() &&\n      token.type === TokenType.IDENTIFIER &&\n      (isToken.END(prevToken) ||\n        ((prevToken.type === TokenType.IDENTIFIER || prevToken.type === TokenType.NUMBER) &&\n          (nextToken.type === TokenType.COMMA || isCommand(nextToken))))\n    );\n  }\n\n  /** True when AS keyword should be added *after* current token */\n  private shouldAddAfter(): boolean {\n    return this.isEdgeCaseCTE() || this.isEdgeCaseCreateTable() || this.isMissingTypeCastAs();\n  }\n\n  // checks for CAST(«expression» [AS] type)\n  private isMissingTypeCastAs(): boolean {\n    return (\n      this.aliasAs === 'never' &&\n      this.isWithinSelect() &&\n      isToken.CAST(this.getPreviousReservedToken()) &&\n      isToken.AS(this.lookAhead()) &&\n      (this.lookAhead(2).type === TokenType.IDENTIFIER ||\n        this.lookAhead(2).type === TokenType.RESERVED_KEYWORD) &&\n      this.lookAhead(3).value === ')'\n    );\n  }\n\n  // checks for WITH `table` [AS] (\n  private isEdgeCaseCTE(): boolean {\n    const nextToken = this.lookAhead();\n    return (\n      this.aliasAs === 'never' &&\n      isToken.WITH(this.lookBehind()) &&\n      (nextToken.value === '(' || (isToken.AS(nextToken) && this.lookAhead(2).value === '('))\n    );\n  }\n\n  // checks for CREATE TABLE `table` [AS] WITH (\n  private isEdgeCaseCreateTable(): boolean {\n    const prevToken = this.lookBehind();\n    const nextToken = this.lookAhead();\n    return (\n      this.aliasAs === 'never' &&\n      (isToken.TABLE(prevToken) || prevToken.value.endsWith('TABLE')) &&\n      (isToken.WITH(nextToken) || (isToken.AS(nextToken) && isToken.WITH(this.lookAhead(2))))\n    );\n  }\n\n  /* True when the current AS token should be discarded */\n  private shouldRemove(): boolean {\n    return this.aliasAs === 'never' || (this.aliasAs === 'select' && this.isRemovableNonSelectAs());\n  }\n\n  private isRemovableNonSelectAs(): boolean {\n    return (\n      this.lookBehind().value === ')' && // ) [AS] alias but not SELECT (a) [AS] alpha\n      !this.isWithinSelect() &&\n      this.lookAhead().value !== '(' // skip WITH foo [AS] ( ...\n    );\n  }\n\n  public getPreviousReservedToken(): Token {\n    return this.previousReservedToken;\n  }\n\n  public isWithinSelect(): boolean {\n    return isToken.SELECT(this.previousCommandToken);\n  }\n\n  private lookBehind(n = 1): Token {\n    return this.lookAhead(-n);\n  }\n\n  private lookAhead(n = 1): Token {\n    return this.tokens[this.index + n] || EOF_TOKEN;\n  }\n}\n"],"mappings":"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"}