{"version":3,"file":"ExpressionFormatter.js","names":["ExpressionFormatter","cfg","params","layout","inline","inlineBlock","InlineBlock","expressionWidth","nodes","index","length","node","type","NodeType","function_call","formatFunctionCall","array_subscript","formatArraySubscript","parenthesis","formatParenthesis","between_predicate","formatBetweenPredicate","clause","formatClause","binary_clause","formatBinaryClause","limit_clause","formatLimitClause","all_columns_asterisk","formatAllColumnsAsterisk","token","formatToken","add","show","nameToken","arrayToken","isInlineBlock","openParen","formatSubExpression","children","WS","NO_SPACE","closeParen","SPACE","NEWLINE","isTabularStyle","INDENT","indentation","increaseBlockLevel","decreaseBlockLevel","betweenToken","expr1","andToken","expr2","increaseTopLevel","decreaseTopLevel","limitToken","offset","count","_node","format","TokenType","LINE_COMMENT","formatLineComment","BLOCK_COMMENT","formatBlockComment","RESERVED_JOIN","formatJoin","RESERVED_DEPENDENT_CLAUSE","formatDependentClause","RESERVED_JOIN_CONDITION","formatJoinCondition","RESERVED_LOGICAL_OPERATOR","formatLogicalOperator","RESERVED_KEYWORD","formatKeyword","RESERVED_CASE_START","formatCaseStart","RESERVED_CASE_END","formatCaseEnd","NAMED_PARAMETER","QUOTED_PARAMETER","INDEXED_PARAMETER","POSITIONAL_PARAMETER","formatParameter","COMMA","formatComma","OPERATOR","formatOperator","IDENTIFIER","QUOTED_IDENTIFIER","STRING","NUMBER","VARIABLE","formatWord","Error","splitBlockComment","value","forEach","line","comment","split","map","test","replace","denseOperators","logicalOperatorNewline","formatMultilineBlockEnd","get","isTabularToken","toTabularFormat","showToken","indentStyle","isReserved","keywordCase","equalizeWhitespace","text","toLowerCase"],"sources":["../../src/formatter/ExpressionFormatter.ts"],"sourcesContent":["import type { FormatOptions } from 'src/types';\nimport { equalizeWhitespace } from 'src/utils';\n\nimport Params from 'src/formatter/Params';\nimport { isTabularStyle } from 'src/formatter/config';\nimport { isReserved, type Token, TokenType } from 'src/lexer/token';\nimport {\n  AllColumnsAsterisk,\n  ArraySubscript,\n  AstNode,\n  BetweenPredicate,\n  BinaryClause,\n  Clause,\n  FunctionCall,\n  LimitClause,\n  NodeType,\n  Parenthesis,\n} from 'src/parser/ast';\n\nimport InlineBlock from './InlineBlock';\nimport Layout, { WS } from './Layout';\nimport toTabularFormat, { isTabularToken } from './tabularStyle';\n\ninterface ExpressionFormatterParams {\n  cfg: FormatOptions;\n  params: Params;\n  layout: Layout;\n  inline?: boolean;\n}\n\n/** Formats a generic SQL expression */\nexport default class ExpressionFormatter {\n  private cfg: FormatOptions;\n  private inlineBlock: InlineBlock;\n  private params: Params;\n  private layout: Layout;\n\n  private inline = false;\n  private nodes: AstNode[] = [];\n  private index = -1;\n\n  constructor({ cfg, params, layout, inline = false }: ExpressionFormatterParams) {\n    this.cfg = cfg;\n    this.inline = inline;\n    this.inlineBlock = new InlineBlock(this.cfg.expressionWidth);\n    this.params = params;\n    this.layout = layout;\n  }\n\n  public format(nodes: AstNode[]): Layout {\n    this.nodes = nodes;\n\n    for (this.index = 0; this.index < this.nodes.length; this.index++) {\n      const node = this.nodes[this.index];\n      switch (node.type) {\n        case NodeType.function_call:\n          this.formatFunctionCall(node);\n          break;\n        case NodeType.array_subscript:\n          this.formatArraySubscript(node);\n          break;\n        case NodeType.parenthesis:\n          this.formatParenthesis(node);\n          break;\n        case NodeType.between_predicate:\n          this.formatBetweenPredicate(node);\n          break;\n        case NodeType.clause:\n          this.formatClause(node);\n          break;\n        case NodeType.binary_clause:\n          this.formatBinaryClause(node);\n          break;\n        case NodeType.limit_clause:\n          this.formatLimitClause(node);\n          break;\n        case NodeType.all_columns_asterisk:\n          this.formatAllColumnsAsterisk(node);\n          break;\n        case NodeType.token:\n          this.formatToken(node.token);\n          break;\n      }\n    }\n    return this.layout;\n  }\n\n  private formatFunctionCall(node: FunctionCall) {\n    this.layout.add(this.show(node.nameToken));\n    this.formatParenthesis(node.parenthesis);\n  }\n\n  private formatArraySubscript(node: ArraySubscript) {\n    this.layout.add(this.show(node.arrayToken));\n    this.formatParenthesis(node.parenthesis);\n  }\n\n  private formatParenthesis(node: Parenthesis) {\n    const inline = this.inlineBlock.isInlineBlock(node);\n\n    if (inline) {\n      this.layout.add(node.openParen);\n      this.layout = this.formatSubExpression(node.children, inline);\n      this.layout.add(WS.NO_SPACE, node.closeParen, WS.SPACE);\n    } else {\n      this.layout.add(node.openParen, WS.NEWLINE);\n\n      if (isTabularStyle(this.cfg)) {\n        this.layout.add(WS.INDENT);\n        this.layout = this.formatSubExpression(node.children, inline);\n      } else {\n        this.layout.indentation.increaseBlockLevel();\n        this.layout.add(WS.INDENT);\n        this.layout = this.formatSubExpression(node.children, inline);\n        this.layout.indentation.decreaseBlockLevel();\n      }\n\n      this.layout.add(WS.NEWLINE, WS.INDENT, node.closeParen, WS.SPACE);\n    }\n  }\n\n  private formatBetweenPredicate(node: BetweenPredicate) {\n    this.layout.add(\n      this.show(node.betweenToken),\n      WS.SPACE,\n      this.show(node.expr1),\n      WS.SPACE,\n      this.show(node.andToken),\n      WS.SPACE,\n      this.show(node.expr2),\n      WS.SPACE\n    );\n  }\n\n  private formatClause(node: Clause) {\n    if (isTabularStyle(this.cfg)) {\n      this.layout.add(WS.NEWLINE, WS.INDENT, this.show(node.nameToken), WS.SPACE);\n    } else {\n      this.layout.add(WS.NEWLINE, WS.INDENT, this.show(node.nameToken), WS.NEWLINE);\n    }\n    this.layout.indentation.increaseTopLevel();\n\n    if (!isTabularStyle(this.cfg)) {\n      this.layout.add(WS.INDENT);\n    }\n    this.layout = this.formatSubExpression(node.children);\n\n    this.layout.indentation.decreaseTopLevel();\n  }\n\n  private formatBinaryClause(node: BinaryClause) {\n    this.layout.indentation.decreaseTopLevel();\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.show(node.nameToken), WS.NEWLINE);\n\n    this.layout.add(WS.INDENT);\n    this.layout = this.formatSubExpression(node.children);\n  }\n\n  private formatLimitClause(node: LimitClause) {\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.show(node.limitToken));\n    this.layout.indentation.increaseTopLevel();\n\n    if (node.offset) {\n      this.layout.add(WS.NEWLINE, WS.INDENT);\n      this.layout = this.formatSubExpression(node.offset);\n      this.layout.add(WS.NO_SPACE, ',', WS.SPACE);\n      this.layout = this.formatSubExpression(node.count);\n    } else {\n      this.layout.add(WS.NEWLINE, WS.INDENT);\n      this.layout = this.formatSubExpression(node.count);\n    }\n    this.layout.indentation.decreaseTopLevel();\n  }\n\n  private formatAllColumnsAsterisk(_node: AllColumnsAsterisk) {\n    this.layout.add('*', WS.SPACE);\n  }\n\n  private formatSubExpression(nodes: AstNode[], inline = this.inline): Layout {\n    return new ExpressionFormatter({\n      cfg: this.cfg,\n      params: this.params,\n      layout: this.layout,\n      inline,\n    }).format(nodes);\n  }\n\n  private formatToken(token: Token): void {\n    switch (token.type) {\n      case TokenType.LINE_COMMENT:\n        return this.formatLineComment(token);\n      case TokenType.BLOCK_COMMENT:\n        return this.formatBlockComment(token);\n      case TokenType.RESERVED_JOIN:\n        return this.formatJoin(token);\n      case TokenType.RESERVED_DEPENDENT_CLAUSE:\n        return this.formatDependentClause(token);\n      case TokenType.RESERVED_JOIN_CONDITION:\n        return this.formatJoinCondition(token);\n      case TokenType.RESERVED_LOGICAL_OPERATOR:\n        return this.formatLogicalOperator(token);\n      case TokenType.RESERVED_KEYWORD:\n        return this.formatKeyword(token);\n      case TokenType.RESERVED_CASE_START:\n        return this.formatCaseStart(token);\n      case TokenType.RESERVED_CASE_END:\n        return this.formatCaseEnd(token);\n      case TokenType.NAMED_PARAMETER:\n      case TokenType.QUOTED_PARAMETER:\n      case TokenType.INDEXED_PARAMETER:\n      case TokenType.POSITIONAL_PARAMETER:\n        return this.formatParameter(token);\n      case TokenType.COMMA:\n        return this.formatComma(token);\n      case TokenType.OPERATOR:\n        return this.formatOperator(token);\n      case TokenType.IDENTIFIER:\n      case TokenType.QUOTED_IDENTIFIER:\n      case TokenType.STRING:\n      case TokenType.NUMBER:\n      case TokenType.VARIABLE:\n        return this.formatWord(token);\n      default:\n        throw new Error(`Unexpected token type: ${token.type}`);\n    }\n  }\n\n  /**\n   * Formats ident/string/number/variable tokens\n   */\n  private formatWord(token: Token) {\n    this.layout.add(this.show(token), WS.SPACE);\n  }\n\n  /** Formats a line comment onto query */\n  private formatLineComment(token: Token) {\n    this.layout.add(this.show(token), WS.NEWLINE, WS.INDENT);\n  }\n\n  /** Formats a block comment onto query */\n  private formatBlockComment(token: Token) {\n    this.splitBlockComment(token.value).forEach(line => {\n      this.layout.add(WS.NEWLINE, WS.INDENT, line);\n    });\n    this.layout.add(WS.NEWLINE, WS.INDENT);\n  }\n\n  // Breaks up block comment to multiple lines.\n  // For example this comment (dots representing leading whitespace):\n  //\n  //   ..../**\n  //   .....* Some description here\n  //   .....* and here too\n  //   .....*/\n  //\n  // gets broken to this array (note the leading single spaces):\n  //\n  //   [ '/**',\n  //     '.* Some description here',\n  //     '.* and here too',\n  //     '.*/' ]\n  //\n  private splitBlockComment(comment: string): string[] {\n    return comment.split(/\\n/).map(line => {\n      if (/^\\s*\\*/.test(line)) {\n        return ' ' + line.replace(/^\\s*/, '');\n      } else {\n        return line.replace(/^\\s*/, '');\n      }\n    });\n  }\n\n  private formatJoin(token: Token) {\n    if (isTabularStyle(this.cfg)) {\n      // in tabular style JOINs are at the same level as clauses\n      this.layout.indentation.decreaseTopLevel();\n      this.layout.add(WS.NEWLINE, WS.INDENT, this.show(token), WS.SPACE);\n      this.layout.indentation.increaseTopLevel();\n    } else {\n      this.layout.add(WS.NEWLINE, WS.INDENT, this.show(token), WS.SPACE);\n    }\n  }\n\n  /**\n   * Formats a Reserved Keyword onto query\n   */\n  private formatKeyword(token: Token) {\n    this.layout.add(this.show(token), WS.SPACE);\n  }\n\n  /**\n   * Formats a Reserved Dependent Clause token onto query, supporting the keyword that precedes it\n   */\n  private formatDependentClause(token: Token) {\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.show(token), WS.SPACE);\n  }\n\n  // Formats ON and USING keywords\n  private formatJoinCondition(token: Token) {\n    this.layout.add(this.show(token), WS.SPACE);\n  }\n\n  /**\n   * Formats an Operator onto query, following rules for specific characters\n   */\n  private formatOperator(token: Token) {\n    // special operator\n    if (token.value === ':') {\n      this.layout.add(WS.NO_SPACE, this.show(token), WS.SPACE);\n      return;\n    } else if (token.value === '.' || token.value === '::') {\n      this.layout.add(WS.NO_SPACE, this.show(token));\n      return;\n    }\n\n    // other operators\n    if (this.cfg.denseOperators) {\n      this.layout.add(WS.NO_SPACE, this.show(token));\n    } else {\n      this.layout.add(this.show(token), WS.SPACE);\n    }\n  }\n\n  /**\n   * Formats a Logical Operator onto query, joining boolean conditions\n   */\n  private formatLogicalOperator(token: Token) {\n    if (this.cfg.logicalOperatorNewline === 'before') {\n      if (isTabularStyle(this.cfg)) {\n        // In tabular style AND/OR is placed on the same level as clauses\n        this.layout.indentation.decreaseTopLevel();\n        this.layout.add(WS.NEWLINE, WS.INDENT, this.show(token), WS.SPACE);\n        this.layout.indentation.increaseTopLevel();\n      } else {\n        this.layout.add(WS.NEWLINE, WS.INDENT, this.show(token), WS.SPACE);\n      }\n    } else {\n      this.layout.add(this.show(token), WS.NEWLINE, WS.INDENT);\n    }\n  }\n\n  private formatCaseStart(token: Token) {\n    this.layout.indentation.increaseBlockLevel();\n    this.layout.add(this.show(token), WS.NEWLINE, WS.INDENT);\n  }\n\n  private formatCaseEnd(token: Token) {\n    this.formatMultilineBlockEnd(token);\n  }\n\n  private formatMultilineBlockEnd(token: Token) {\n    this.layout.indentation.decreaseBlockLevel();\n\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.show(token), WS.SPACE);\n  }\n\n  /**\n   * Formats a parameter placeholder item onto query, to be replaced with the value of the placeholder\n   */\n  private formatParameter(token: Token) {\n    this.layout.add(this.params.get(token), WS.SPACE);\n  }\n\n  /**\n   * Formats a comma Operator onto query, ending line unless in an Inline Block\n   */\n  private formatComma(token: Token) {\n    if (!this.inline) {\n      this.layout.add(WS.NO_SPACE, this.show(token), WS.NEWLINE, WS.INDENT);\n    } else {\n      this.layout.add(WS.NO_SPACE, this.show(token), WS.SPACE);\n    }\n  }\n\n  private show(token: Token): string {\n    if (isTabularToken(token)) {\n      return toTabularFormat(this.showToken(token), this.cfg.indentStyle);\n    } else {\n      return this.showToken(token);\n    }\n  }\n\n  // don't call this directly, always use show() instead.\n  private showToken(token: Token): string {\n    if (isReserved(token)) {\n      switch (this.cfg.keywordCase) {\n        case 'preserve':\n          return equalizeWhitespace(token.text);\n        case 'upper':\n          return token.value;\n        case 'lower':\n          return token.value.toLowerCase();\n      }\n    } else {\n      return token.value;\n    }\n  }\n}\n"],"mappings":"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"}