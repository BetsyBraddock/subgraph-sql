{"version":3,"file":"token.js","names":["TokenType","EOF_TOKEN","type","EOF","text","value","testToken","compareToken","token","isToken","AS","RESERVED_KEYWORD","AND","RESERVED_LOGICAL_OPERATOR","ARRAY","BETWEEN","CASE","RESERVED_CASE_START","CAST","BY","END","RESERVED_CASE_END","FROM","RESERVED_COMMAND","LIMIT","SELECT","SET","STRUCT","TABLE","WINDOW","WITH","isCommand","RESERVED_BINARY_COMMAND","isReserved","RESERVED_DEPENDENT_CLAUSE","RESERVED_JOIN_CONDITION","RESERVED_JOIN"],"sources":["../../src/lexer/token.ts"],"sourcesContent":["/** Token type enum for all possible Token categories */\nexport enum TokenType {\n  QUOTED_IDENTIFIER = 'QUOTED_IDENTIFIER',\n  IDENTIFIER = 'IDENTIFIER',\n  STRING = 'STRING',\n  VARIABLE = 'VARIABLE',\n  RESERVED_KEYWORD = 'RESERVED_KEYWORD',\n  RESERVED_LOGICAL_OPERATOR = 'RESERVED_LOGICAL_OPERATOR',\n  RESERVED_DEPENDENT_CLAUSE = 'RESERVED_DEPENDENT_CLAUSE',\n  RESERVED_BINARY_COMMAND = 'RESERVED_BINARY_COMMAND',\n  RESERVED_COMMAND = 'RESERVED_COMMAND',\n  RESERVED_JOIN = 'RESERVED_JOIN',\n  RESERVED_JOIN_CONDITION = 'RESERVED_JOIN_CONDITION',\n  RESERVED_CASE_START = 'RESERVED_CASE_START',\n  RESERVED_CASE_END = 'RESERVED_CASE_END',\n  OPERATOR = 'OPERATOR',\n  COMMA = 'COMMA',\n  OPEN_PAREN = 'OPEN_PAREN',\n  CLOSE_PAREN = 'CLOSE_PAREN',\n  LINE_COMMENT = 'LINE_COMMENT',\n  BLOCK_COMMENT = 'BLOCK_COMMENT',\n  NUMBER = 'NUMBER',\n  NAMED_PARAMETER = 'NAMED_PARAMETER',\n  QUOTED_PARAMETER = 'QUOTED_PARAMETER',\n  INDEXED_PARAMETER = 'INDEXED_PARAMETER',\n  POSITIONAL_PARAMETER = 'POSITIONAL_PARAMETER',\n  DELIMITER = 'DELIMITER',\n  EOF = 'EOF',\n}\n\n/** Struct to store the most basic cohesive unit of language grammar */\nexport interface Token {\n  type: TokenType;\n  text: string; // The raw original text that was matched\n  value: string; // Cleaned up `text` e.g. keyword converted to uppercase and extra spaces removed\n  key?: string;\n  whitespaceBefore?: string;\n}\n\n/**\n * For use as a \"missing token\"\n * e.g. in lookAhead and lookBehind to avoid dealing with null values\n */\nexport const EOF_TOKEN = { type: TokenType.EOF, text: '«EOF»', value: '«EOF»' };\n\n/** Checks if two tokens are equivalent */\nexport const testToken =\n  (compareToken: { type: TokenType; value: string }) =>\n  (token: Token): boolean =>\n    token.type === compareToken.type && token.value === compareToken.value;\n\n/** Util object that allows for easy checking of Reserved Keywords */\nexport const isToken = {\n  AS: testToken({ value: 'AS', type: TokenType.RESERVED_KEYWORD }),\n  AND: testToken({ value: 'AND', type: TokenType.RESERVED_LOGICAL_OPERATOR }),\n  ARRAY: testToken({ value: 'ARRAY', type: TokenType.RESERVED_KEYWORD }),\n  BETWEEN: testToken({ value: 'BETWEEN', type: TokenType.RESERVED_KEYWORD }),\n  CASE: testToken({ value: 'CASE', type: TokenType.RESERVED_CASE_START }),\n  CAST: testToken({ value: 'CAST', type: TokenType.RESERVED_KEYWORD }),\n  BY: testToken({ value: 'BY', type: TokenType.RESERVED_KEYWORD }),\n  END: testToken({ value: 'END', type: TokenType.RESERVED_CASE_END }),\n  FROM: testToken({ value: 'FROM', type: TokenType.RESERVED_COMMAND }),\n  LIMIT: testToken({ value: 'LIMIT', type: TokenType.RESERVED_COMMAND }),\n  SELECT: testToken({ value: 'SELECT', type: TokenType.RESERVED_COMMAND }),\n  SET: testToken({ value: 'SET', type: TokenType.RESERVED_COMMAND }),\n  STRUCT: testToken({ value: 'STRUCT', type: TokenType.RESERVED_KEYWORD }),\n  TABLE: testToken({ value: 'TABLE', type: TokenType.RESERVED_KEYWORD }),\n  WINDOW: testToken({ value: 'WINDOW', type: TokenType.RESERVED_COMMAND }),\n  WITH: testToken({ value: 'WITH', type: TokenType.RESERVED_COMMAND }),\n};\n\n/** Checks if token is a Reserved Command or Reserved Binary Command */\nexport const isCommand = (token: Token): boolean =>\n  token.type === TokenType.RESERVED_COMMAND || token.type === TokenType.RESERVED_BINARY_COMMAND;\n\n/** Checks if token is any Reserved Keyword or Command */\nexport const isReserved = (token: Token): boolean =>\n  token.type === TokenType.RESERVED_KEYWORD ||\n  token.type === TokenType.RESERVED_LOGICAL_OPERATOR ||\n  token.type === TokenType.RESERVED_DEPENDENT_CLAUSE ||\n  token.type === TokenType.RESERVED_JOIN_CONDITION ||\n  token.type === TokenType.RESERVED_COMMAND ||\n  token.type === TokenType.RESERVED_BINARY_COMMAND ||\n  token.type === TokenType.RESERVED_JOIN ||\n  token.type === TokenType.RESERVED_CASE_START ||\n  token.type === TokenType.RESERVED_CASE_END;\n"],"mappings":"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"}