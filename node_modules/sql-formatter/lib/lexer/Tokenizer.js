"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _token = require("./token");

var regex = _interopRequireWildcard(require("./regexFactory"));

var _regexUtil = require("./regexUtil");

var _TokenizerEngine = _interopRequireDefault(require("./TokenizerEngine"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Tokenizer = /*#__PURE__*/function () {
  function Tokenizer(cfg) {
    var _cfg$lineCommentTypes, _cfg$openParens, _cfg$closeParens, _cfg$reservedLogicalO, _cfg$reservedJoinCond, _cfg$namedParamTypes, _cfg$quotedParamTypes, _cfg$numberedParamTyp, _cfg$operators, _this$validRules;

    _classCallCheck(this, Tokenizer);

    _defineProperty(this, "engine", void 0);

    _defineProperty(this, "postProcess", void 0);

    var rules = this.validRules((_this$validRules = {}, _defineProperty(_this$validRules, _token.TokenType.BLOCK_COMMENT, {
      regex: new RegExp("(\\/\\*(?:(?![])[\\s\\S])*?(?:\\*\\/|$))", "y")
    }), _defineProperty(_this$validRules, _token.TokenType.LINE_COMMENT, {
      regex: regex.lineComment((_cfg$lineCommentTypes = cfg.lineCommentTypes) !== null && _cfg$lineCommentTypes !== void 0 ? _cfg$lineCommentTypes : ['--'])
    }), _defineProperty(_this$validRules, _token.TokenType.COMMA, {
      regex: new RegExp("[,]", "y")
    }), _defineProperty(_this$validRules, _token.TokenType.OPEN_PAREN, {
      regex: regex.parenthesis((_cfg$openParens = cfg.openParens) !== null && _cfg$openParens !== void 0 ? _cfg$openParens : ['('])
    }), _defineProperty(_this$validRules, _token.TokenType.CLOSE_PAREN, {
      regex: regex.parenthesis((_cfg$closeParens = cfg.closeParens) !== null && _cfg$closeParens !== void 0 ? _cfg$closeParens : [')'])
    }), _defineProperty(_this$validRules, _token.TokenType.QUOTED_IDENTIFIER, {
      regex: regex.string(cfg.identTypes)
    }), _defineProperty(_this$validRules, _token.TokenType.NUMBER, {
      regex: new RegExp("(?:0x[0-9A-Fa-f]+|0b[01]+|(?:\\x2D[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*)?[0-9]+(?:\\.[0-9]*)?(?:[Ee][\\+\\x2D]?[0-9]+(?:\\.[0-9]+)?)?)", "y")
    }), _defineProperty(_this$validRules, _token.TokenType.RESERVED_CASE_START, {
      regex: new RegExp("[Cc][Aa][Ss][Ee]\\b", "y"),
      value: function value(v) {
        return v.toUpperCase();
      }
    }), _defineProperty(_this$validRules, _token.TokenType.RESERVED_CASE_END, {
      regex: new RegExp("[Ee][Nn][Dd]\\b", "y"),
      value: function value(v) {
        return v.toUpperCase();
      }
    }), _defineProperty(_this$validRules, _token.TokenType.RESERVED_COMMAND, {
      regex: regex.reservedWord(cfg.reservedCommands, cfg.identChars),
      value: function value(v) {
        return v.toUpperCase();
      }
    }), _defineProperty(_this$validRules, _token.TokenType.RESERVED_BINARY_COMMAND, {
      regex: regex.reservedWord(cfg.reservedBinaryCommands, cfg.identChars),
      value: function value(v) {
        return v.toUpperCase();
      }
    }), _defineProperty(_this$validRules, _token.TokenType.RESERVED_DEPENDENT_CLAUSE, {
      regex: regex.reservedWord(cfg.reservedDependentClauses, cfg.identChars),
      value: function value(v) {
        return v.toUpperCase();
      }
    }), _defineProperty(_this$validRules, _token.TokenType.RESERVED_JOIN, {
      regex: regex.reservedWord(cfg.reservedJoins, cfg.identChars),
      value: function value(v) {
        return v.toUpperCase();
      }
    }), _defineProperty(_this$validRules, _token.TokenType.RESERVED_KEYWORD, {
      regex: regex.reservedWord(cfg.reservedKeywords, cfg.identChars),
      value: function value(v) {
        return v.toUpperCase();
      }
    }), _defineProperty(_this$validRules, _token.TokenType.RESERVED_LOGICAL_OPERATOR, {
      regex: regex.reservedWord((_cfg$reservedLogicalO = cfg.reservedLogicalOperators) !== null && _cfg$reservedLogicalO !== void 0 ? _cfg$reservedLogicalO : ['AND', 'OR'], cfg.identChars),
      value: function value(v) {
        return v.toUpperCase();
      }
    }), _defineProperty(_this$validRules, _token.TokenType.RESERVED_JOIN_CONDITION, {
      regex: regex.reservedWord((_cfg$reservedJoinCond = cfg.reservedJoinConditions) !== null && _cfg$reservedJoinCond !== void 0 ? _cfg$reservedJoinCond : ['ON', 'USING'], cfg.identChars),
      value: function value(v) {
        return v.toUpperCase();
      }
    }), _defineProperty(_this$validRules, _token.TokenType.NAMED_PARAMETER, {
      regex: regex.parameter((_cfg$namedParamTypes = cfg.namedParamTypes) !== null && _cfg$namedParamTypes !== void 0 ? _cfg$namedParamTypes : [], regex.identifierPattern(cfg.paramChars || cfg.identChars)),
      key: function key(v) {
        return v.slice(1);
      }
    }), _defineProperty(_this$validRules, _token.TokenType.QUOTED_PARAMETER, {
      regex: regex.parameter((_cfg$quotedParamTypes = cfg.quotedParamTypes) !== null && _cfg$quotedParamTypes !== void 0 ? _cfg$quotedParamTypes : [], regex.stringPattern(cfg.identTypes)),
      key: function key(v) {
        return function (_ref) {
          var tokenKey = _ref.tokenKey,
              quoteChar = _ref.quoteChar;
          return tokenKey.replace(new RegExp((0, _regexUtil.escapeRegExp)('\\' + quoteChar), 'gu'), quoteChar);
        }({
          tokenKey: v.slice(2, -1),
          quoteChar: v.slice(-1)
        });
      }
    }), _defineProperty(_this$validRules, _token.TokenType.INDEXED_PARAMETER, {
      regex: regex.parameter((_cfg$numberedParamTyp = cfg.numberedParamTypes) !== null && _cfg$numberedParamTyp !== void 0 ? _cfg$numberedParamTyp : [], '[0-9]+'),
      key: function key(v) {
        return v.slice(1);
      }
    }), _defineProperty(_this$validRules, _token.TokenType.POSITIONAL_PARAMETER, {
      regex: cfg.positionalParams ? new RegExp("[?]", "y") : undefined
    }), _defineProperty(_this$validRules, _token.TokenType.VARIABLE, {
      regex: cfg.variableTypes ? regex.variable(cfg.variableTypes) : _regexUtil.NULL_REGEX
    }), _defineProperty(_this$validRules, _token.TokenType.STRING, {
      regex: regex.string(cfg.stringTypes)
    }), _defineProperty(_this$validRules, _token.TokenType.IDENTIFIER, {
      regex: regex.identifier(cfg.identChars)
    }), _defineProperty(_this$validRules, _token.TokenType.DELIMITER, {
      regex: new RegExp(";", "y")
    }), _defineProperty(_this$validRules, _token.TokenType.OPERATOR, {
      regex: regex.operator('+-/*%&|^><=.:$@#?~![]{}', ['<>', '<=', '>=', '!='].concat(_toConsumableArray((_cfg$operators = cfg.operators) !== null && _cfg$operators !== void 0 ? _cfg$operators : [])))
    }), _this$validRules));
    this.engine = new _TokenizerEngine["default"](rules);
    this.postProcess = cfg.postProcess;
  } // filters out unsupported *_PARAMETER types whose regex is undefined


  _createClass(Tokenizer, [{
    key: "validRules",
    value: function validRules(rules) {
      return Object.fromEntries(Object.entries(rules).filter(function (_ref2) {
        var _ref3 = _slicedToArray(_ref2, 2),
            _ = _ref3[0],
            rule = _ref3[1];

        return rule.regex;
      }));
    }
  }, {
    key: "tokenize",
    value: function tokenize(input) {
      var tokens = this.engine.tokenize(input);
      return this.postProcess ? this.postProcess(tokens) : tokens;
    }
  }]);

  return Tokenizer;
}();

exports["default"] = Tokenizer;
module.exports = exports.default;
//# sourceMappingURL=Tokenizer.js.map