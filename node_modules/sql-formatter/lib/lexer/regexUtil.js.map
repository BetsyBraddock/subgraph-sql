{"version":3,"file":"regexUtil.js","names":["escapeRegExp","string","replace","NULL_REGEX","WHITESPACE_REGEX","patternToRegex","pattern","RegExp","toCaseInsensitivePattern","prefix","split","map","char","test","toUpperCase","toLowerCase","join","escapeParen","paren","length","withDashes","prefixesPattern","prefixes","requirePrefix"],"sources":["../../src/lexer/regexUtil.ts"],"sourcesContent":["import type { PrefixedQuoteType } from './regexTypes';\n\n// Escapes regex special chars\nexport const escapeRegExp = (string: string) => string.replace(/[.*+?^${}()|[\\]\\\\]/gu, '\\\\$&');\n\nexport const NULL_REGEX = /^(?!)/; // zero-width negative lookahead, matches nothing\n\nexport const WHITESPACE_REGEX = /(\\s+)/uy;\n\nexport const patternToRegex = (pattern: string): RegExp => new RegExp(`(?:${pattern})`, 'uy');\n\n// Converts \"ab\" to \"[Aa][Bb]\"\nexport const toCaseInsensitivePattern = (prefix: string): string =>\n  prefix\n    .split('')\n    .map(char => (/ /gu.test(char) ? '\\\\s+' : `[${char.toUpperCase()}${char.toLowerCase()}]`))\n    .join('');\n\n/** Escapes paren characters for RegExp patterns */\nexport const escapeParen = (paren: string): string => {\n  if (paren.length === 1) {\n    // A single punctuation character\n    return escapeRegExp(paren);\n  } else {\n    // longer word\n    return '\\\\b' + paren + '\\\\b';\n  }\n};\n\nexport const withDashes = (pattern: string): string => pattern + '(?:-' + pattern + ')*';\n\n// Converts [\"a\", \"b\"] to \"(?:[Aa]|[Bb]|)\" or \"(?:[Aa]|[Bb])\" when required = true\nexport const prefixesPattern = ({ prefixes, requirePrefix }: PrefixedQuoteType): string =>\n  `(?:${prefixes.map(toCaseInsensitivePattern).join('|')}${requirePrefix ? '' : '|'})`;\n"],"mappings":";;;;;;;AAEA;AACO,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD;EAAA,OAAoBA,MAAM,CAACC,OAAP,CAAe,0BAAf,EAAuC,MAAvC,CAApB;AAAA,CAArB;;;AAEA,IAAMC,UAAU,GAAG,OAAnB,C,CAA4B;;;AAE5B,IAAMC,gBAAgB,wGAAtB;;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD;EAAA,OAA6B,IAAIC,MAAJ,cAAiBD,OAAjB,QAA6B,IAA7B,CAA7B;AAAA,CAAvB,C,CAEP;;;;;AACO,IAAME,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACC,MAAD;EAAA,OACtCA,MAAM,CACHC,KADH,CACS,EADT,EAEGC,GAFH,CAEO,UAAAC,KAAI;IAAA,OAAK,KAAMC,IAAN,CAAWD,KAAX,IAAmB,MAAnB,cAAgCA,KAAI,CAACE,WAAL,EAAhC,SAAqDF,KAAI,CAACG,WAAL,EAArD,MAAL;EAAA,CAFX,EAGGC,IAHH,CAGQ,EAHR,CADsC;AAAA,CAAjC;AAMP;;;;;AACO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAA2B;EACpD,IAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;IACtB;IACA,OAAOnB,YAAY,CAACkB,KAAD,CAAnB;EACD,CAHD,MAGO;IACL;IACA,OAAO,QAAQA,KAAR,GAAgB,KAAvB;EACD;AACF,CARM;;;;AAUA,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACd,OAAD;EAAA,OAA6BA,OAAO,GAAG,MAAV,GAAmBA,OAAnB,GAA6B,IAA1D;AAAA,CAAnB,C,CAEP;;;;;AACO,IAAMe,eAAe,GAAG,SAAlBA,eAAkB;EAAA,IAAGC,QAAH,QAAGA,QAAH;EAAA,IAAaC,aAAb,QAAaA,aAAb;EAAA,oBACvBD,QAAQ,CAACX,GAAT,CAAaH,wBAAb,EAAuCQ,IAAvC,CAA4C,GAA5C,CADuB,SAC4BO,aAAa,GAAG,EAAH,GAAQ,GADjD;AAAA,CAAxB"}