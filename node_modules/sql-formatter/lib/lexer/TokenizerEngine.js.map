{"version":3,"file":"TokenizerEngine.js","names":["TokenizerEngine","rules","input","index","tokens","token","length","whitespaceBefore","getWhitespace","getNextToken","Error","slice","push","WHITESPACE_REGEX","lastIndex","matches","exec","previousToken","matchToken","TokenType","BLOCK_COMMENT","LINE_COMMENT","COMMA","OPEN_PAREN","CLOSE_PAREN","QUOTED_IDENTIFIER","NUMBER","matchReservedWordToken","matchPlaceholderToken","NAMED_PARAMETER","QUOTED_PARAMETER","INDEXED_PARAMETER","POSITIONAL_PARAMETER","VARIABLE","STRING","IDENTIFIER","DELIMITER","OPERATOR","tokenType","tokenRule","key","value","undefined","RESERVED_CASE_START","RESERVED_CASE_END","RESERVED_COMMAND","RESERVED_BINARY_COMMAND","RESERVED_DEPENDENT_CLAUSE","RESERVED_JOIN","RESERVED_KEYWORD","RESERVED_LOGICAL_OPERATOR","RESERVED_JOIN_CONDITION","rule","match","type","regex","transform","matchedToken","text"],"sources":["../../src/lexer/TokenizerEngine.ts"],"sourcesContent":["import { Token, TokenType } from 'src/lexer/token';\nimport { WHITESPACE_REGEX } from './regexUtil';\n\nexport interface TokenRule {\n  regex: RegExp;\n  key?: (token: string) => string;\n  value?: (token: string) => string;\n}\n\nexport default class TokenizerEngine {\n  private rules: Partial<Record<TokenType, TokenRule>>;\n\n  // The input SQL string to process\n  private input = '';\n  // Current position in string\n  private index = 0;\n\n  constructor(rules: Partial<Record<TokenType, TokenRule>>) {\n    this.rules = rules;\n  }\n\n  /**\n   * Takes a SQL string and breaks it into tokens.\n   * Each token is an object with type and value.\n   *\n   * @param {string} input - The SQL string\n   * @returns {Token[]} output token stream\n   */\n  public tokenize(input: string): Token[] {\n    this.input = input;\n    this.index = 0;\n    const tokens: Token[] = [];\n    let token: Token | undefined;\n\n    // Keep processing the string until end is reached\n    while (this.index < this.input.length) {\n      // grab any preceding whitespace\n      const whitespaceBefore = this.getWhitespace();\n\n      if (this.index < this.input.length) {\n        // Get the next token and the token type\n        token = this.getNextToken(token);\n        if (!token) {\n          throw new Error(`Parse error: Unexpected \"${input.slice(this.index, 100)}\"`);\n        }\n\n        tokens.push({ ...token, whitespaceBefore });\n      }\n    }\n    return tokens;\n  }\n\n  private getWhitespace(): string {\n    WHITESPACE_REGEX.lastIndex = this.index;\n    const matches = WHITESPACE_REGEX.exec(this.input);\n    if (matches) {\n      // Advance current position by matched whitespace length\n      this.index += matches[0].length;\n      return matches[0];\n    } else {\n      return '';\n    }\n  }\n\n  private getNextToken(previousToken?: Token): Token | undefined {\n    return (\n      this.matchToken(TokenType.BLOCK_COMMENT) ||\n      this.matchToken(TokenType.LINE_COMMENT) ||\n      this.matchToken(TokenType.COMMA) ||\n      this.matchToken(TokenType.OPEN_PAREN) ||\n      this.matchToken(TokenType.CLOSE_PAREN) ||\n      this.matchToken(TokenType.QUOTED_IDENTIFIER) ||\n      this.matchToken(TokenType.NUMBER) ||\n      this.matchReservedWordToken(previousToken) ||\n      this.matchPlaceholderToken(TokenType.NAMED_PARAMETER) ||\n      this.matchPlaceholderToken(TokenType.QUOTED_PARAMETER) ||\n      this.matchPlaceholderToken(TokenType.INDEXED_PARAMETER) ||\n      this.matchPlaceholderToken(TokenType.POSITIONAL_PARAMETER) ||\n      this.matchToken(TokenType.VARIABLE) ||\n      this.matchToken(TokenType.STRING) ||\n      this.matchToken(TokenType.IDENTIFIER) ||\n      this.matchToken(TokenType.DELIMITER) ||\n      this.matchToken(TokenType.OPERATOR)\n    );\n  }\n\n  private matchPlaceholderToken(tokenType: TokenType): Token | undefined {\n    if (tokenType in this.rules) {\n      const token = this.matchToken(tokenType);\n      const tokenRule = this.rules[tokenType];\n      if (token) {\n        if (tokenRule?.key) {\n          return { ...token, key: tokenRule.key(token.value) };\n        }\n        return token; // POSITIONAL_PARAMETER does not have a key transform function\n      }\n    }\n    return undefined;\n  }\n\n  private matchReservedWordToken(previousToken?: Token): Token | undefined {\n    // A reserved word cannot be preceded by a '.'\n    // this makes it so in \"mytable.from\", \"from\" is not considered a reserved word\n    if (previousToken?.value === '.') {\n      return undefined;\n    }\n\n    // prioritised list of Reserved token types\n    return (\n      this.matchToken(TokenType.RESERVED_CASE_START) ||\n      this.matchToken(TokenType.RESERVED_CASE_END) ||\n      this.matchToken(TokenType.RESERVED_COMMAND) ||\n      this.matchToken(TokenType.RESERVED_BINARY_COMMAND) ||\n      this.matchToken(TokenType.RESERVED_DEPENDENT_CLAUSE) ||\n      this.matchToken(TokenType.RESERVED_JOIN) ||\n      this.matchToken(TokenType.RESERVED_KEYWORD) ||\n      this.matchToken(TokenType.RESERVED_LOGICAL_OPERATOR) ||\n      this.matchToken(TokenType.RESERVED_JOIN_CONDITION)\n    );\n  }\n\n  // Shorthand for `match` that looks up regex from rules\n  private matchToken(tokenType: TokenType): Token | undefined {\n    const rule = this.rules[tokenType];\n    if (!rule) {\n      throw Error(`Unknown token type found: ${tokenType}`);\n    }\n    return this.match({\n      type: tokenType,\n      regex: rule.regex,\n      transform: rule.value,\n    });\n  }\n\n  // Attempts to match RegExp at current position in input\n  private match({\n    type,\n    regex,\n    transform,\n  }: {\n    type: TokenType;\n    regex: RegExp;\n    transform?: (s: string) => string;\n  }): Token | undefined {\n    regex.lastIndex = this.index;\n    const matches = regex.exec(this.input);\n    if (matches) {\n      const matchedToken = matches[0];\n\n      // Advance current position by matched token length\n      this.index += matchedToken.length;\n      return {\n        type,\n        text: matchedToken,\n        value: transform ? transform(matchedToken) : matchedToken,\n      };\n    }\n    return undefined;\n  }\n}\n"],"mappings":"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"}