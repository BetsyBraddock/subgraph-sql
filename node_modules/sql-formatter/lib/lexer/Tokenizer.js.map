{"version":3,"file":"Tokenizer.js","names":["Tokenizer","cfg","rules","validRules","TokenType","BLOCK_COMMENT","regex","LINE_COMMENT","lineComment","lineCommentTypes","COMMA","OPEN_PAREN","parenthesis","openParens","CLOSE_PAREN","closeParens","QUOTED_IDENTIFIER","string","identTypes","NUMBER","RESERVED_CASE_START","value","v","toUpperCase","RESERVED_CASE_END","RESERVED_COMMAND","reservedWord","reservedCommands","identChars","RESERVED_BINARY_COMMAND","reservedBinaryCommands","RESERVED_DEPENDENT_CLAUSE","reservedDependentClauses","RESERVED_JOIN","reservedJoins","RESERVED_KEYWORD","reservedKeywords","RESERVED_LOGICAL_OPERATOR","reservedLogicalOperators","RESERVED_JOIN_CONDITION","reservedJoinConditions","NAMED_PARAMETER","parameter","namedParamTypes","identifierPattern","paramChars","key","slice","QUOTED_PARAMETER","quotedParamTypes","stringPattern","tokenKey","quoteChar","replace","RegExp","escapeRegExp","INDEXED_PARAMETER","numberedParamTypes","POSITIONAL_PARAMETER","positionalParams","undefined","VARIABLE","variableTypes","variable","NULL_REGEX","STRING","stringTypes","IDENTIFIER","identifier","DELIMITER","OPERATOR","operator","operators","engine","TokenizerEngine","postProcess","Object","fromEntries","entries","filter","_","rule","input","tokens","tokenize"],"sources":["../../src/lexer/Tokenizer.ts"],"sourcesContent":["import { Token, TokenType } from 'src/lexer/token';\nimport * as regex from 'src/lexer/regexFactory';\nimport * as regexTypes from 'src/lexer/regexTypes';\n\nimport { NULL_REGEX, escapeRegExp } from './regexUtil';\nimport TokenizerEngine, { type TokenRule } from './TokenizerEngine';\n\ninterface TokenizerOptions {\n  // Main clauses that start new block, like: SELECT, FROM, WHERE, ORDER BY\n  reservedCommands: string[];\n  // Logical operator keywords, defaults to: [AND, OR]\n  reservedLogicalOperators?: string[];\n  // Keywords in CASE expressions that begin new line, like: WHEN, ELSE\n  reservedDependentClauses: string[];\n  // Keywords that create newline but no indentaion of their body.\n  // These contain set operations like UNION and various joins like LEFT OUTER JOIN\n  reservedBinaryCommands: string[];\n  // Various joins like LEFT OUTER JOIN\n  reservedJoins: string[];\n  // keywords used for JOIN conditions, defaults to: [ON, USING]\n  reservedJoinConditions?: string[];\n  // all other reserved words (not included to any of the above lists)\n  reservedKeywords: string[];\n  // Types of quotes to use for strings\n  stringTypes: regexTypes.QuoteType[];\n  // Types of quotes to use for quoted identifiers\n  identTypes: regexTypes.QuoteType[];\n  // Types of quotes to use for variables\n  variableTypes?: regexTypes.VariableType[];\n  // Open-parenthesis characters\n  openParens?: ('(' | '[' | '{')[];\n  // Close-parenthesis characters\n  closeParens?: (')' | ']' | '}')[];\n  // True to allow for positional \"?\" parameter placeholders\n  positionalParams?: boolean;\n  // Prefixes for numbered parameter placeholders to support, e.g. :1, :2, :3\n  numberedParamTypes?: ('?' | ':' | '$')[];\n  // Prefixes for named parameter placeholders to support, e.g. :name\n  namedParamTypes?: (':' | '@' | '$')[];\n  // Prefixes for quoted parameter placeholders to support, e.g. :\"name\"\n  // The type of quotes will depend on `identifierTypes` option.\n  quotedParamTypes?: (':' | '@' | '$')[];\n  // Line comment types to support, defaults to --\n  lineCommentTypes?: string[];\n  // Additional characters to support in identifiers\n  identChars?: regexTypes.IdentChars;\n  // Additional characters to support in named parameters\n  // Use this when parameters allow different characters from identifiers\n  // Defaults to `identChars`.\n  paramChars?: regexTypes.IdentChars;\n  // Additional multi-character operators to support, in addition to <=, >=, <>, !=\n  operators?: string[];\n  // Allows custom modifications on the token array.\n  // Called after the whole input string has been split into tokens.\n  // The result of this will be the output of the tokenizer.\n  postProcess?: (tokens: Token[]) => Token[];\n}\n\nexport default class Tokenizer {\n  private engine: TokenizerEngine;\n  private postProcess?: (tokens: Token[]) => Token[];\n\n  constructor(cfg: TokenizerOptions) {\n    const rules = this.validRules({\n      [TokenType.BLOCK_COMMENT]: { regex: /(\\/\\*[^]*?(?:\\*\\/|$))/uy },\n      [TokenType.LINE_COMMENT]: {\n        regex: regex.lineComment(cfg.lineCommentTypes ?? ['--']),\n      },\n      [TokenType.COMMA]: { regex: /[,]/y },\n      [TokenType.OPEN_PAREN]: { regex: regex.parenthesis(cfg.openParens ?? ['(']) },\n      [TokenType.CLOSE_PAREN]: { regex: regex.parenthesis(cfg.closeParens ?? [')']) },\n      [TokenType.QUOTED_IDENTIFIER]: { regex: regex.string(cfg.identTypes) },\n      [TokenType.NUMBER]: {\n        regex:\n          /(?:0x[0-9a-fA-F]+|0b[01]+|(?:-\\s*)?[0-9]+(?:\\.[0-9]*)?(?:[eE][-+]?[0-9]+(?:\\.[0-9]+)?)?)/uy,\n      },\n      [TokenType.RESERVED_CASE_START]: {\n        regex: /[Cc][Aa][Ss][Ee]\\b/uy,\n        value: v => v.toUpperCase(),\n      },\n      [TokenType.RESERVED_CASE_END]: { regex: /[Ee][Nn][Dd]\\b/uy, value: v => v.toUpperCase() },\n      [TokenType.RESERVED_COMMAND]: {\n        regex: regex.reservedWord(cfg.reservedCommands, cfg.identChars),\n        value: v => v.toUpperCase(),\n      },\n      [TokenType.RESERVED_BINARY_COMMAND]: {\n        regex: regex.reservedWord(cfg.reservedBinaryCommands, cfg.identChars),\n        value: v => v.toUpperCase(),\n      },\n      [TokenType.RESERVED_DEPENDENT_CLAUSE]: {\n        regex: regex.reservedWord(cfg.reservedDependentClauses, cfg.identChars),\n        value: v => v.toUpperCase(),\n      },\n      [TokenType.RESERVED_JOIN]: {\n        regex: regex.reservedWord(cfg.reservedJoins, cfg.identChars),\n        value: v => v.toUpperCase(),\n      },\n      [TokenType.RESERVED_KEYWORD]: {\n        regex: regex.reservedWord(cfg.reservedKeywords, cfg.identChars),\n        value: v => v.toUpperCase(),\n      },\n      [TokenType.RESERVED_LOGICAL_OPERATOR]: {\n        regex: regex.reservedWord(cfg.reservedLogicalOperators ?? ['AND', 'OR'], cfg.identChars),\n        value: v => v.toUpperCase(),\n      },\n      [TokenType.RESERVED_JOIN_CONDITION]: {\n        regex: regex.reservedWord(cfg.reservedJoinConditions ?? ['ON', 'USING'], cfg.identChars),\n        value: v => v.toUpperCase(),\n      },\n      [TokenType.NAMED_PARAMETER]: {\n        regex: regex.parameter(\n          cfg.namedParamTypes ?? [],\n          regex.identifierPattern(cfg.paramChars || cfg.identChars)\n        ),\n        key: v => v.slice(1),\n      },\n      [TokenType.QUOTED_PARAMETER]: {\n        regex: regex.parameter(cfg.quotedParamTypes ?? [], regex.stringPattern(cfg.identTypes)),\n        key: v =>\n          (({ tokenKey, quoteChar }) =>\n            tokenKey.replace(new RegExp(escapeRegExp('\\\\' + quoteChar), 'gu'), quoteChar))({\n            tokenKey: v.slice(2, -1),\n            quoteChar: v.slice(-1),\n          }),\n      },\n      [TokenType.INDEXED_PARAMETER]: {\n        regex: regex.parameter(cfg.numberedParamTypes ?? [], '[0-9]+'),\n        key: v => v.slice(1),\n      },\n      [TokenType.POSITIONAL_PARAMETER]: {\n        regex: cfg.positionalParams ? /[?]/y : undefined,\n      },\n      [TokenType.VARIABLE]: {\n        regex: cfg.variableTypes ? regex.variable(cfg.variableTypes) : NULL_REGEX,\n      },\n      [TokenType.STRING]: { regex: regex.string(cfg.stringTypes) },\n      [TokenType.IDENTIFIER]: {\n        regex: regex.identifier(cfg.identChars),\n      },\n      [TokenType.DELIMITER]: { regex: /[;]/uy },\n      [TokenType.OPERATOR]: {\n        regex: regex.operator('+-/*%&|^><=.:$@#?~![]{}', [\n          '<>',\n          '<=',\n          '>=',\n          '!=',\n          ...(cfg.operators ?? []),\n        ]),\n      },\n    });\n\n    this.engine = new TokenizerEngine(rules);\n\n    this.postProcess = cfg.postProcess;\n  }\n\n  // filters out unsupported *_PARAMETER types whose regex is undefined\n  private validRules(\n    rules: Partial<Record<TokenType, TokenRule | { regex: undefined }>>\n  ): Partial<Record<TokenType, TokenRule>> {\n    return Object.fromEntries(Object.entries(rules).filter(([_, rule]) => rule.regex));\n  }\n\n  public tokenize(input: string): Token[] {\n    const tokens = this.engine.tokenize(input);\n    return this.postProcess ? this.postProcess(tokens) : tokens;\n  }\n}\n"],"mappings":"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"}